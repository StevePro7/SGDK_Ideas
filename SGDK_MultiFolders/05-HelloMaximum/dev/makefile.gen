BIN= $(GDK)/bin
LIB= $(GDK)/lib

LIBSRC= $(GDK)/src
LIBRES= $(GDK)/res
LIBINCLUDE= $(GDK)/inc

SRC= src
RES= res
INCLUDE= inc

SHELL= $(BIN)/sh
RM= $(BIN)/rm
CP= $(BIN)/cp
CC= $(BIN)/gcc
LD= $(BIN)/ld
NM= $(BIN)/nm
JAVA= java
ECHO= echo
OBJCPY= $(BIN)/objcopy
ASMZ80= $(BIN)/sjasm
MACCER= $(BIN)/mac68k
SIZEBND= $(BIN)/sizebnd
BINTOS= $(BIN)/bintos
RESCOMP= $(JAVA) -jar $(BIN)/rescomp.jar
MKDIR= $(BIN)/mkdir

SRC_C= $(wildcard *.c)
SRC_C+= $(wildcard $(SRC)/*.c)
SRC_C+= $(wildcard $(SRC)/engine/*.c)
SRC_C+= $(wildcard $(SRC)/object/*.c)
SRC_C+= $(wildcard $(SRC)/screen/*.c)

RES_C= $(wildcard $(RES)/*.c)
RES_RES= $(wildcard *.res)
RES_RES+= $(wildcard $(RES)/*.res)

OBJ= $(RES_RES:.res=.o)
OBJ+= $(RES_C:.c=.o)
OBJ+= $(SRC_C:.c=.o)
OBJS= $(addprefix out/, $(OBJ))

LST= $(SRC_C:.c=.lst)
LSTS= $(addprefix out/, $(LST))

INCS= -I$(INCLUDE) -I$(INCLUDE)/engine -I$(INCLUDE)/object -I$(INCLUDE)/screen -I$(SRC) -I$(RES) -I$(LIBINCLUDE) -I$(LIBRES)
DEFAULT_FLAGS= -m68000 -Wall -Wextra -Wno-shift-negative-value -fno-builtin $(INCS) -B$(BIN)
FLAGSZ80= -i$(SRC) -i$(INCLUDE) -i$(RES) -i$(LIBSRC) -i$(LIBINCLUDE)


#release: FLAGS= $(DEFAULT_FLAGS) -Os -fomit-frame-pointer -fuse-linker-plugin -flto
release: FLAGS= $(DEFAULT_FLAGS) -O3 -fuse-linker-plugin -fno-web -fno-gcse -fno-unit-at-a-time -fomit-frame-pointer -flto
release: LIBMD= $(LIB)/libmd.a
::release: pre-build out/rom.bin out/symbol.txt
release: out/rom.bin

debug: FLAGS= $(DEFAULT_FLAGS) -O1 -ggdb -DDEBUG=1
debug: LIBMD= $(LIB)/libmd_debug.a
debug: pre-build out/rom.bin out/rom.out out/symbol.txt


all: release
default: release

Default: release
Debug: debug
Release: release

.PHONY: clean

	
out/rom.bin: out/rom.out
	$(OBJCPY) -O binary out/rom.out out/rom.bin
	$(SIZEBND) out/rom.bin -sizealign 131072


out/symbol.txt: out/rom.out
	$(NM) --plugin=liblto_plugin-0.dll -n out/rom.out > out/symbol.txt


out/rom.out: out/sega.o out/cmd_ $(LIBMD)
	$(CC) -B$(BIN) -n -T $(GDK)/md.ld -nostdlib out/sega.o @out/cmd_ $(LIBMD) $(LIB)/libgcc.a -o out/rom.out
	$(RM) out/cmd_


out/cmd_: $(OBJS)
	$(ECHO) "$(OBJS)" > out/cmd_


out/rom_head.bin: out/rom_head.o
	$(LD) -T $(GDK)/md.ld -nostdlib --oformat binary -o $@ $<


out/%.o: %.c
	$(CC) $(FLAGS) -c $< -o $@